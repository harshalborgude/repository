package org.hrb.staticSynchronisation;

class Brackets{
	
	synchronized static public void generate(String threadCode) {
			
			for(int i=1;i<=10;i++) {
				try {
					Thread.sleep(1);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(i<=5) {
					System.out.print("[");
				}
				else {
					System.out.print("]");
				}
				
			}
		System.out.println("generated by thread :"+threadCode);
	}
}

public class App {
	
	// if we are using 2 objects and same method then we have to use synchronised static method.
	// whenever we are marking static element as synchronised then lock will be based on class.
	public static void main(String[] args) {
	
		//bracket.generate();

		new Thread(new Runnable() {

			@Override
			public void run() {
				long startTime= System.currentTimeMillis();
				for(int i=1;i<=10;i++) {
					Brackets.generate("th1");
				}
				long endTime= System.currentTimeMillis();
				System.out.println("time for thread 1:"+(endTime-startTime));
			}


		}).start();;

		new Thread(new Runnable() {

			@Override
			public void run() {
				long startTime= System.currentTimeMillis();
				for(int i=1;i<=10;i++) {
					Brackets.generate("th2");
				}				
				long endTime= System.currentTimeMillis();
				System.out.println("time for thread 2:"+(endTime-startTime));
			}

		}).start();;

	}

}
